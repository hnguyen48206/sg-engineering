'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.addModel = exports.addResponseHeader = exports.addResponse = exports.addPathParameter = exports.addFormDataParameter = exports.addQueryParameter = exports.addBodyParameter = exports.addHeaderParameter = exports.addTag = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const state = require('swagger-spec-express/lib/state-manager');
const validator = require('swagger-spec-express/lib/validator');
const schemaIds = require('swagger-spec-express/lib/schema-ids');
function addTag(tag, options) {
    addToCommon({
        schemaKey: schemaIds.tag,
        object: tag,
        targetObject: state.common.tags,
        displayName: 'Tag',
    }, options);
}
exports.addTag = addTag;
function addHeaderParameter(header, options) {
    addToCommon({
        schemaKey: schemaIds.parameter.header,
        in: 'header',
        object: header,
        targetObject: state.common.parameters.header,
        displayName: 'header parameter',
    }, options);
}
exports.addHeaderParameter = addHeaderParameter;
function addBodyParameter(body, options) {
    addToCommon({
        schemaKey: schemaIds.parameter.body,
        in: 'body',
        object: body,
        targetObject: state.common.parameters.body,
        displayName: 'body parameter',
    }, options);
}
exports.addBodyParameter = addBodyParameter;
function addQueryParameter(query, options) {
    addToCommon({
        schemaKey: schemaIds.parameter.query,
        in: 'query',
        object: query,
        targetObject: state.common.parameters.query,
        displayName: 'query parameter',
    }, options);
}
exports.addQueryParameter = addQueryParameter;
function addFormDataParameter(formData, options) {
    addToCommon({
        schemaKey: schemaIds.parameter.formData,
        in: 'formData',
        object: formData,
        targetObject: state.common.parameters.formData,
        displayName: 'formData parameter',
    }, options);
}
exports.addFormDataParameter = addFormDataParameter;
function addPathParameter(path, options) {
    addToCommon({
        schemaKey: schemaIds.parameter.path,
        in: 'path',
        object: path,
        targetObject: state.common.parameters.path,
        displayName: 'path parameter',
    }, options);
}
exports.addPathParameter = addPathParameter;
function addResponse(response, options) {
    addToCommon({
        schemaKey: schemaIds.response,
        object: response,
        targetObject: state.common.responses,
        displayName: 'response',
    }, options);
}
exports.addResponse = addResponse;
function addResponseHeader(responseHeader, options) {
    addToCommon({
        schemaKey: schemaIds.header,
        object: responseHeader,
        targetObject: state.common.responseHeaders,
        displayName: 'header response',
        deleteNameFromCommon: true,
    }, options);
}
exports.addResponseHeader = addResponseHeader;
function addModel(model, inputOptions) {
    const options = {
        schemaKey: schemaIds.schema,
        object: model,
        targetObject: state.common.models,
        displayName: 'Model',
        deleteNameFromCommon: true,
    };
    applyDefaults(options, inputOptions);
    ensureObjectExists(options);
    cloneObject(options);
    delete options.object.$schema;
    delete options.object.$id;
    const definitions = options.object.definitions;
    delete options.object.definitions;
    applyValidation(options);
    ensureHasName(options);
    ensureNotAlreadyAdded(options);
    setObjectOnTarget(options);
    applyNameDeletion(options);
    if (!definitions) {
        return;
    }
    Object.keys(definitions).forEach(function (key) {
        const definition = lodash_1.default.cloneDeep(definitions[key]);
        definition.name = key;
        addModel(definition, inputOptions);
    });
}
exports.addModel = addModel;
function addToCommon(options, inputOptions) {
    applyDefaults(options, inputOptions);
    ensureObjectExists(options);
    cloneObject(options);
    if (!lodash_1.default.isNil(options.in)) {
        options.object.in = options.in;
    }
    applyValidation(options);
    ensureHasName(options);
    ensureNotAlreadyAdded(options);
    setObjectOnTarget(options);
    applyNameDeletion(options);
}
function applyDefaults(options, inputOptions) {
    if (!options) {
        throw new Error('Options is required');
    }
    const defaults = {
        validation: 'throw',
        deleteNameFromCommon: false,
    };
    inputOptions = inputOptions || {};
    const keys = Object.keys(defaults);
    inputOptions = lodash_1.default.pick(inputOptions, keys);
    lodash_1.default.defaults(options, inputOptions, defaults);
}
function ensureObjectExists(options) {
    if (!options.displayName) {
        throw new Error('displayName is required.');
    }
    if (!options.object) {
        throw new Error(options.displayName + ' is required.');
    }
    if (!lodash_1.default.isObject(options.object)) {
        throw new Error(options.displayName + ' must be an object');
    }
}
function cloneObject(options) {
    options.object = lodash_1.default.cloneDeep(options.object);
}
function applyValidation(options) {
    if (options.validation === 'ignore') {
        return;
    }
    if (options.validation === 'throw') {
        return validator.ensureValid(options.schemaKey, options.object);
    }
    const result = validator.validate(options.schemaKey, options.object);
    if (result.valid) {
        return;
    }
    console.warn(result.message, result.error);
}
function ensureHasName(options) {
    if (!options.object.name) {
        throw new Error('Name is required');
    }
    if (!lodash_1.default.isString(options.object.name)) {
        throw new Error('Name must be a string');
    }
}
function ensureNotAlreadyAdded(options) {
    const existingObject = options.targetObject[getKey(options.object)];
    if (existingObject) {
        existingObject.name = options.object.name;
        if (!lodash_1.default.isEqual(existingObject, options.object)) {
            throw new Error('There already is a ' +
                options.displayName.toLowerCase() +
                ' with the name ' +
                options.object.name +
                ' and the objects themselves were not equal. Existing ' +
                JSON.stringify(existingObject) +
                ' Object to add :' +
                JSON.stringify(options.object));
        }
    }
}
function setObjectOnTarget(options) {
    3;
    options.targetObject[getKey(options.object)] = options.object;
}
function applyNameDeletion(options) {
    if (options.deleteNameFromCommon) {
        delete options.targetObject[getKey(options.object)].name;
    }
}
function getKey(object) {
    let key = object.name;
    if (object.modelName) {
        key = `${key}-${object.modelName}`;
    }
    return key;
}
//# sourceMappingURL=common.js.map